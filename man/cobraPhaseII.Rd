% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cobraPhaseII.R
\name{cobraPhaseII}
\alias{cobraPhaseII}
\title{Improve the feasible solution by searching new infill points}
\usage{
cobraPhaseII(cobra)
}
\arguments{
\item{cobra}{an object of class COBRA, this is a (long) list containing all settings
from \code{\link{cobraInit}}}
}
\value{
\code{cobra}, an object of class COBRA from \code{\link{cobraInit}}, 
   enhanced here by the following elements (among others):
     \item{\code{fn}}{ function accepting a \code{d}-dimensional vector \eqn{\vec{x}} and
           returning an \code{(1+m+r)}-vector \code{c(}\eqn{f,g_1,\ldots,g_m,h_1,\ldots,h_r}\code{)}. This
           function may be a rescaled and plog-transformed version of the original \code{fn} 
           passed into \code{\link{cobraInit}}. The original \code{fn} is stored in 
           \code{cobra$originalFn}. }
     \item{\code{df}}{  data frame with summary of the optimization run (see \code{\link{updateSaveCobra}})}
     \item{\code{df2}}{  data frame with additional summary information (see \code{\link{updateSaveCobra}})}
     \item{\code{dftr}}{  data frame with additional summary information for TR (see below)}
     \item{\code{A}}{ \code{(feval x d)}-matrix containing all evaluated points 
           in input space. If rescale==TRUE, all points are in \strong{rescaled} input space. }
     \item{\code{Fres}}{ a vector of the objective values of all evaluated points }
     \item{\code{Gres}}{ a \code{(feval x m)}-matrix of the constraint values of all evaluated points }
     \item{\code{predC}}{ a \code{(feval x m)}-matrix with the prediction of  
           \code{cobra$constraintSurrogates} at all evaluated points  }
     \item{\code{fbest}}{ the best feasible objective value found }
     \item{\code{xbest}}{ the point in input space yielding the best feasible objective value }
     \item{\code{ibest}}{ the corresponding iteration number (row of cobra$df, of cobra$A)}
     \item{\code{PLOG}}{ If TRUE, then the objective surrogate model is trained on the 
           \code{\link{plog}}-transformed objective function. }
  Note that \code{cobra$Fres}, \code{cobra$fbest}, \code{cobra$fbestArray} and similar contain 
  always the objective values of the orignial function \code{cobra$fn[1]}. (The surrogate models 
  may be trained on a \code{\link{plog}}-transformed version of this function.)
  
  \code{feval} = \code{cobra$feval} is the maximum number of function evaluations.\cr
}
\description{
Improve the feasible solution using the SACOBRA optimizer phase II
by searching new infill points with the help of RBF surrogate models. 
May be even called if no feasible solution is found yet, then phase II will try to find
feasible solutions. \cr
The problem to solve iteratively is: \cr
\deqn{ \mbox{Minimize}\quad  f(\vec{x}) , \vec{x} \in [\vec{a},\vec{b}] \subset \mathbf{R}^d }
\deqn{ \mbox{subject to}\quad g_i(\vec{x}) \le 0, i=1,\ldots,m    }
\deqn{ \mbox{~~~~~~~~~~}\quad\quad h_j(\vec{x}) = 0, j=1,\ldots,r.    } \cr
In this phase the main optimization steps are repeated in a loop as long as the budget is not exhausted.
In every iteration the surrogate models are updated and an optimization on the surrogates is done in order 
to find a better feasible solution.
}
\examples{
## Initialize cobra. The problem to solve is the unconstrained sphere function sum(x^2).   
 
## In version 1.1 and higher there is no need for defining a dummy 
## constraint function for the unconstrained problems
d=2
fName="sphere"
cobra <- cobraInit(xStart=rep(5,d), fName=fName,
                   fn=function(x){c(obj=sum(x^2))},  
                   lower=rep(-10,d), upper=rep(10,d), feval=40)
                   
## Run cobra optimizer
cobra <- cobraPhaseII(cobra)

## The true solution is at solu = c(0,0)
## where the true optimum is fn(solu)[1] = optim = 0
## The solution found by SACOBRA:
print(getXbest(cobra))
print(getFbest(cobra))

## Plot the resulting error (best-so-far feasible optimizer result - true optimum)
## on a logarithmic scale:
optim = 0
plot(cobra$df$Best-optim,log="y",type="l",ylab="error",xlab="iteration",main=fName)

}
\seealso{
\code{\link{cobraPhaseI}}, \code{\link{cobraInit}}
}
\author{
Wolfgang Konen, Samineh Bagheri, Patrick Koch, Cologne University of Applied Sciences
}
